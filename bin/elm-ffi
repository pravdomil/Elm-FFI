#!/usr/bin/env node

try {
  main(process.argv.slice(2))
} catch (e) {
  die(String(e))
}

/**
 * @param {string[]} arguments
 */
function main(arguments) {
  const usage = "Usage: elm-ffi [--shebang] [--run] [--legacy] <file.js>..."

  const [options, files] = arguments.reduce(reduceArgument, [new Map(), []])
  if (files.length === 0) {
    die(usage)
  }

  files.forEach((a) => processFile(options, a))
  const fileCount = files.length + " " + (files.length === 1 ? "file" : "files")
  console.log("Elm FFI patched " + fileCount + ".")
}

/**
 * @param {Map<String, String>} options
 * @param {string} a
 */
function processFile(options, a) {
  let b = require("fs").readFileSync(a, "utf-8")

  b = b.replace(/(\$author\$project[0-9A-Za-z_$]*\$JavaScript)\$run\('(.*)'\)/g, (a, b, c) =>
    patchFunction(options, b, c.replace(/\\'/g, "'"))
  )

  b = b.replace(
    /(\$author\$project[0-9A-Za-z_$]*\$JavaScript\$anyDecoder = )(.*?);/gs,
    (_, b) => b + "_Json_decodePrim(function(a) { return $elm$core$Result$Ok(a) });"
  )

  if (options.has("legacy")) {
    b = legacyPatch(b)
  }

  if (options.has("shebang")) {
    b = "#!/usr/bin/env node\n" + b
  }

  if (options.has("run")) {
    b = b.replace(/\(0\)}}\);}\(this\)\);$/, "(0)()}});}(this));")
  }

  require("fs").writeFileSync(a, b)
}

/**
 * @param {string} a
 */
function legacyPatch(a) {
  return a
    .split("\n")
    .map((b) => {
      b = b.replace(
        "return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;",
        "return x === y ? /*EQ*/ 0 : (x < y ? /*LT*/ -1 : /*GT*/ 1);"
      )
      b = b.replace("? (name == 'init')", "? ((name == 'init')")
      b = b.replace(": (obj[name] = exports[name]);", "): (obj[name] = exports[name]);")
      b = b.replace(/\bchar\b/g, "char_")
      b = b.replace(/Array.isArray\(/g, '(function(a) { return "length" in a })(')
      b = b.replace(/JSON.stringify\(/g, "(function(a) { return String(a) })(")
      return b
    })
    .join("\n")
}

/**
 * @param {Map<String, String>} options
 * @param {string} moduleName
 * @param {string} a
 */
function patchFunction(options, moduleName, a) {
  a.startsWith("await ") ? options.set("async", "") : options.delete("async")

  return createBindingFn(
    options,
    [
      "var result",
      createTryCatch(
        options,
        "result = { $: 0, a: _Json_wrap(" + a + ") }",
        "result = { $: 1, a: " + moduleName + "$Exception(_Json_wrap(e)) }"
      ),
      "result.$ === 0 ? callback(_Scheduler_succeed(result.a)) : callback(_Scheduler_fail(result.a))",
    ].join("; ")
  )
}

/**
 * @param {Map<String, String>} options
 * @param {string} a
 */
function createBindingFn(options, a) {
  return "_Scheduler_binding(" + createFn(options, ["callback"], a) + ")"
}

/**
 * @param {Map<String, String>} options
 * @param {string} a
 * @param {string} b
 */
function createTryCatch(options, a, b) {
  return "try { " + a + " } catch (e) { " + b + " }"
}

/**
 * @param {Map<String, String>} options
 * @param {Array<string>} params
 * @param {string} a
 */
function createFn(options, params, a) {
  return options.has("async")
    ? "async (" + params.join(", ") + ") => { " + a + " }"
    : "function (" + params.join(", ") + ") { " + a + " }"
}

/**
 * @param {[Map<String, String>, Array<String>]} acc
 * @param {string} a
 * @returns {[Map<String, String>, Array<String>]}
 */
function reduceArgument([options, arguments], a) {
  if (a.startsWith("--")) {
    const [k, ...rest] = a.split("=")
    options.set(k.substr(2), rest.join("="))
  } else {
    arguments.push(a)
  }
  return [options, arguments]
}

/**
 * @param {string} a
 */
function die(a) {
  console.error(a)
  process.exit(1)
}
